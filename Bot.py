import os
import random
import sqlite3
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters

# ==================== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ====================
TOKEN ='8404293329:AAEvjbpPfYb_uDaAIakvym06kSOaNkUn9ME'
DB_NAME = 'gamebot.db'

# ==================== –ë–ê–ó–ê –î–ê–ù–ù–´–• ====================
def init_db():
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    c.execute('''CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        coins INTEGER DEFAULT 100,
        total_score INTEGER DEFAULT 0,
        games_played INTEGER DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π
    c.execute('''CREATE TABLE IF NOT EXISTS game_sessions (
        session_id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        game_type TEXT,
        score INTEGER,
        played_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )''')
    
    conn.commit()
    conn.close()

def get_user(user_id):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
    user = c.fetchone()
    conn.close()
    return user

def create_user(user_id, username):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)', (user_id, username))
    conn.commit()
    conn.close()

def update_coins(user_id, amount):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('UPDATE users SET coins = coins + ? WHERE user_id = ?', (amount, user_id))
    conn.commit()
    conn.close()

def save_game_score(user_id, game_type, score):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('INSERT INTO game_sessions (user_id, game_type, score) VALUES (?, ?, ?)', 
              (user_id, game_type, score))
    c.execute('UPDATE users SET total_score = total_score + ?, games_played = games_played + 1 WHERE user_id = ?',
              (score, user_id))
    conn.commit()
    conn.close()

def get_leaderboard(limit=10):
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute('SELECT username, total_score, games_played FROM users ORDER BY total_score DESC LIMIT ?', (limit,))
    board = c.fetchall()
    conn.close()
    return board

# ==================== –î–ê–ù–ù–´–ï –ò–ì–† ====================

# –í–∏–∫—Ç–æ—Ä–∏–Ω–∞
QUIZ_QUESTIONS = [
    {"q": "–ö–∞–∫–∞—è –ø–ª–∞–Ω–µ—Ç–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –≤ –°–æ–ª–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?", "options": ["–ú–∞—Ä—Å", "–Æ–ø–∏—Ç–µ—Ä", "–°–∞—Ç—É—Ä–Ω", "–ù–µ–ø—Ç—É–Ω"], "answer": 1},
    {"q": "–°–∫–æ–ª—å–∫–æ –∫–æ—Å—Ç–µ–π –≤ —Ç–µ–ª–µ –≤–∑—Ä–æ—Å–ª–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞?", "options": ["156", "206", "256", "306"], "answer": 1},
    {"q": "–ö–∞–∫–æ–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —Ö–∏–º–∏—á–µ—Å–∫–∏–π —Å–∏–º–≤–æ–ª 'Au'?", "options": ["–°–µ—Ä–µ–±—Ä–æ", "–ó–æ–ª–æ—Ç–æ", "–ú–µ–¥—å", "–ñ–µ–ª–µ–∑–æ"], "answer": 1},
    {"q": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –í—Ç–æ—Ä–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞?", "options": ["1943", "1944", "1945", "1946"], "answer": 2},
    {"q": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞'?", "options": ["–î–∂. –†. –†. –¢–æ–ª–∫–∏–Ω", "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥", "–°—Ç–∏–≤–µ–Ω –ö–∏–Ω–≥", "–î–∂–æ—Ä–¥–∂ –ú–∞—Ä—Ç–∏–Ω"], "answer": 1},
    {"q": "–ö–∞–∫–∞—è —Å—Ç—Ä–∞–Ω–∞ —Å–∞–º–∞—è –±–æ–ª—å—à–∞—è –ø–æ –ø–ª–æ—â–∞–¥–∏?", "options": ["–ö–∞–Ω–∞–¥–∞", "–ö–∏—Ç–∞–π", "–°–®–ê", "–†–æ—Å—Å–∏—è"], "answer": 3},
    {"q": "–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä—É–Ω —É —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –≥–∏—Ç–∞—Ä—ã?", "options": ["4", "6", "8", "12"], "answer": 1},
    {"q": "–ö–∞–∫–æ–µ –∂–∏–≤–æ—Ç–Ω–æ–µ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –Ω–∞ —Å—É—à–µ?", "options": ["–õ–µ–≤", "–ì–µ–ø–∞—Ä–¥", "–ê–Ω—Ç–∏–ª–æ–ø–∞", "–õ–æ—à–∞–¥—å"], "answer": 1},
    {"q": "–ö–∞–∫–æ–π –æ–∫–µ–∞–Ω —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π?", "options": ["–ê—Ç–ª–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π", "–ò–Ω–¥–∏–π—Å–∫–∏–π", "–°–µ–≤–µ—Ä–Ω—ã–π –õ–µ–¥–æ–≤–∏—Ç—ã–π", "–¢–∏—Ö–∏–π"], "answer": 3},
    {"q": "–ö—Ç–æ –∏–∑–æ–±—Ä–µ–ª —Ç–µ–ª–µ—Ñ–æ–Ω?", "options": ["–¢–æ–º–∞—Å –≠–¥–∏—Å–æ–Ω", "–ù–∏–∫–æ–ª–∞ –¢–µ—Å–ª–∞", "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ë–µ–ª–ª", "–ì–µ–Ω—Ä–∏ –§–æ—Ä–¥"], "answer": 2},
]

# –í–∏—Å–µ–ª–∏—Ü–∞
HANGMAN_WORDS = {
    "—Ñ–∏–ª—å–º—ã": ["–ú–ê–¢–†–ò–¶–ê", "–ê–í–ê–¢–ê–†", "–¢–ò–¢–ê–ù–ò–ö", "–ù–ê–ß–ê–õ–û", "–ì–õ–ê–î–ò–ê–¢–û–†", "–ò–ù–¢–ï–†–°–¢–ï–õ–õ–ê–†"],
    "–∏–≥—Ä—ã": ["–ú–ê–ô–ù–ö–†–ê–§–¢", "–§–û–†–¢–ù–ê–ô–¢", "–î–û–¢–ê", "–ö–û–ù–¢–†–°–¢–†–ê–ô–ö", "–í–ê–õ–û–†–ê–ù–¢", "–†–û–ë–õ–û–ö–°"],
    "–∂–∏–≤–æ—Ç–Ω—ã–µ": ["–ñ–ò–†–ê–§", "–ö–†–û–ö–û–î–ò–õ", "–ü–ò–ù–ì–í–ò–ù", "–î–ï–õ–¨–§–ò–ù", "–ú–ï–î–í–ï–î–¨", "–ö–ï–ù–ì–£–†–£"],
    "—Å—Ç—Ä–∞–Ω—ã": ["–§–†–ê–ù–¶–ò–Ø", "–Ø–ü–û–ù–ò–Ø", "–ë–†–ê–ó–ò–õ–ò–Ø", "–ê–í–°–¢–†–ê–õ–ò–Ø", "–ï–ì–ò–ü–ï–¢", "–ö–ê–ù–ê–î–ê"],
}

# –°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞
WORD_GAME_WORDS = [
    {"word": "–ü–†–û–ì–†–ê–ú–ú–ò–†–û–í–ê–ù–ò–ï", "min_words": 15},
    {"word": "–ö–û–ú–ü–¨–Æ–¢–ï–†", "min_words": 10},
    {"word": "–¢–ï–õ–ï–§–û–ù", "min_words": 8},
]

# ==================== –ò–ì–†–û–í–ê–Ø –õ–û–ì–ò–ö–ê ====================

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–≥—Ä–æ–≤—ã—Ö —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
user_games = {}

def get_game_state(user_id):
    return user_games.get(user_id, {})

def set_game_state(user_id, state):
    user_games[user_id] = state

def clear_game_state(user_id):
    if user_id in user_games:
        del user_games[user_id]

# ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ====================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    create_user(user.id, user.username or user.first_name)
    
    keyboard = [
        [InlineKeyboardButton("üéØ –ò–≥—Ä–∞—Ç—å", callback_data="menu_games")],
        [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard"),
         InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üéÆ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ GameBox!</b>\n\n"
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –ì–æ—Ç–æ–≤ —Å—ã–≥—Ä–∞—Ç—å?\n\n"
        f"ü™ô –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 100 –º–æ–Ω–µ—Ç\n"
        f"üéØ –ò–≥—Ä–∞–π, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –∏ –ø–æ–ø–∞–¥–∏ –≤ —Ç–æ–ø!",
        reply_markup=reply_markup,
        parse_mode='HTML'
    )

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = query.from_user.id
    
    # ===== –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ =====
    if data == "menu_main":
        keyboard = [
            [InlineKeyboardButton("üéØ –ò–≥—Ä–∞—Ç—å", callback_data="menu_games")],
            [InlineKeyboardButton("üèÜ –†–µ–π—Ç–∏–Ω–≥", callback_data="leaderboard"),
             InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üéÆ <b>GameBox - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # ===== –ú–ï–ù–Æ –ò–ì–† =====
    elif data == "menu_games":
        keyboard = [
            [InlineKeyboardButton("‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞", callback_data="game_quiz")],
            [InlineKeyboardButton("üéØ –í–∏—Å–µ–ª–∏—Ü–∞", callback_data="game_hangman")],
            [InlineKeyboardButton("üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", callback_data="game_math")],
            [InlineKeyboardButton("üìù –°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞", callback_data="game_words")],
            [InlineKeyboardButton("‚úä‚úã‚úåÔ∏è –ö-–ù-–ë", callback_data="game_rps")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "üéØ <b>–í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:</b>\n\n"
            "‚ùì <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b> - –ø—Ä–æ–≤–µ—Ä—å —ç—Ä—É–¥–∏—Ü–∏—é\n"
            "üéØ <b>–í–∏—Å–µ–ª–∏—Ü–∞</b> - —É–≥–∞–¥–∞–π —Å–ª–æ–≤–æ\n"
            "üßÆ <b>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</b> - —Ä–µ—à–∏ –ø—Ä–∏–º–µ—Ä—ã\n"
            "üìù <b>–°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞</b> - —Å–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–∞\n"
            "‚úä‚úã‚úåÔ∏è <b>–ö-–ù-–ë</b> - –∏–≥—Ä–∞–π –ø—Ä–æ—Ç–∏–≤ –±–æ—Ç–∞",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # ===== –ü–†–û–§–ò–õ–¨ =====
    elif data == "profile":
        user = get_user(user_id)
        if user:
            keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(
                f"üë§ <b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
                f"üÜî ID: {user[0]}\n"
                f"üë§ –ò–º—è: {user[1]}\n"
                f"ü™ô –ú–æ–Ω–µ—Ç—ã: {user[2]}\n"
                f"‚≠ê –û–±—â–∏–π —Å—á–µ—Ç: {user[3]}\n"
                f"üéÆ –ò–≥—Ä —Å—ã–≥—Ä–∞–Ω–æ: {user[4]}\n",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
    
    # ===== –†–ï–ô–¢–ò–ù–ì =====
    elif data == "leaderboard":
        board = get_leaderboard(10)
        text = "üèÜ <b>–¢–û–ü-10 –∏–≥—Ä–æ–∫–æ–≤</b>\n\n"
        for i, (username, score, games) in enumerate(board, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else f"{i}."
            text += f"{medal} {username} - ‚≠ê{score} ({games} –∏–≥—Ä)\n"
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    # ===== –ü–û–ú–û–©–¨ =====
    elif data == "help":
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="menu_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(
            "‚ÑπÔ∏è <b>–ö–∞–∫ –∏–≥—Ä–∞—Ç—å?</b>\n\n"
            "üéØ –í—ã–±–∏—Ä–∞–π –∏–≥—Ä—ã –∏–∑ –º–µ–Ω—é\n"
            "ü™ô –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –º–æ–Ω–µ—Ç—ã –∑–∞ –ø–æ–±–µ–¥—ã\n"
            "‚≠ê –ù–∞–±–∏—Ä–∞–π –æ—á–∫–∏ –∏ –ø–æ–ø–∞–¥–∞–π –≤ —Ç–æ–ø\n"
            "üèÜ –°–æ—Ä–µ–≤–Ω—É–π—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏\n\n"
            "üí° <b>–ù–∞–≥—Ä–∞–¥—ã:</b>\n"
            "‚ùì –í–∏–∫—Ç–æ—Ä–∏–Ω–∞: +10 –º–æ–Ω–µ—Ç –∑–∞ –≤–æ–ø—Ä–æ—Å\n"
            "üéØ –í–∏—Å–µ–ª–∏—Ü–∞: +20 –º–æ–Ω–µ—Ç –∑–∞ —Å–ª–æ–≤–æ\n"
            "üßÆ –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: +5 –º–æ–Ω–µ—Ç –∑–∞ –ø—Ä–∏–º–µ—Ä\n"
            "üìù –°–ª–æ–≤–∞: +2 –º–æ–Ω–µ—Ç—ã –∑–∞ —Å–ª–æ–≤–æ\n"
            "‚úä‚úã‚úåÔ∏è –ö-–ù-–ë: +15 –º–æ–Ω–µ—Ç –∑–∞ –ø–æ–±–µ–¥—É",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # ===== –ò–ì–†–ê: –í–ò–ö–¢–û–†–ò–ù–ê =====
    elif data == "game_quiz":
        question = random.choice(QUIZ_QUESTIONS)
        set_game_state(user_id, {"game": "quiz", "question": question, "score": 0})
        
        keyboard = []
        for i, option in enumerate(question["options"]):
            keyboard.append([InlineKeyboardButton(option, callback_data=f"quiz_answer_{i}")])
        keyboard.append([InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="menu_games")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚ùì <b>–í–∏–∫—Ç–æ—Ä–∏–Ω–∞</b>\n\n{question['q']}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif data.startswith("quiz_answer_"):
        answer_idx = int(data.split("_")[-1])
        state = get_game_state(user_id)
        
        if state.get("game") == "quiz":
            question = state["question"]
            correct = answer_idx == question["answer"]
            
            if correct:
                update_coins(user_id, 10)
                save_game_score(user_id, "quiz", 10)
                text = "‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +10 –º–æ–Ω–µ—Ç</b>\n\n–ò–≥—Ä–∞–µ–º –¥–∞–ª—å—à–µ?"
            else:
                text = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['options'][question['answer']]}\n\n–ü–æ–ø—Ä–æ–±—É–µ—à—å –µ—â–µ?"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ï—â–µ –≤–æ–ø—Ä–æ—Å", callback_data="game_quiz")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="menu_games")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode='HTML')
    
    # ===== –ò–ì–†–ê: –í–ò–°–ï–õ–ò–¶–ê =====
    elif data == "game_hangman":
        category = random.choice(list(HANGMAN_WORDS.keys()))
        word = random.choice(HANGMAN_WORDS[category])
        
        set_game_state(user_id, {
            "game": "hangman",
            "word": word,
            "category": category,
            "guessed": set(),
            "attempts": 6
        })
        
        keyboard = [[InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="menu_games")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üéØ <b>–í–∏—Å–µ–ª–∏—Ü–∞</b>\n\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
            f"–°–ª–æ–≤–æ: {' '.join(['_' for _ in word])}\n"
            f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: 6\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å –±—É–∫–≤—É –≤ —á–∞—Ç!",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # ===== –ò–ì–†–ê: –ú–ê–¢–ï–ú–ê–¢–ò–ö–ê =====
    elif data == "game_math":
        num1 = random.randint(1, 20)
        num2 = random.randint(1, 20)
        operation = random.choice(['+', '-', '*'])
        
        if operation == '+':
            answer = num1 + num2
        elif operation == '-':
            answer = num1 - num2
        else:
            answer = num1 * num2
        
        set_game_state(user_id, {
            "game": "math",
            "answer": answer,
            "score": 0
        })
        
        keyboard = [[InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="menu_games")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üßÆ <b>–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞</b>\n\n"
            f"–†–µ—à–∏ –ø—Ä–∏–º–µ—Ä:\n"
            f"<code>{num1} {operation} {num2} = ?</code>\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å –æ—Ç–≤–µ—Ç —á–∏—Å–ª–æ–º!",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    # ===== –ò–ì–†–ê: –°–õ–û–í–ê –ò–ó –°–õ–û–í–ê =====
    elif data == "game_words":
        word_data = random.choice(WORD_GAME_WORDS)
        
        set_game_state(user_id, {
            "game": "words",
            "main_word": word_data["word"],
            "found_words": set(),
            "min_words": word_data["min_words"]
        })
        
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="words_finish")],
            [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="menu_games")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üìù <b>–°–ª–æ–≤–∞ –∏–∑ —Å–ª–æ–≤–∞</b>\n\n"
            f"–°–æ—Å—Ç–∞–≤—å —Å–ª–æ–≤–∞ –∏–∑ –±—É–∫–≤:\n"
            f"<b>{word_data['word']}</b>\n\n"
            f"–ú–∏–Ω–∏–º—É–º –±—É–∫–≤ –≤ —Å–ª–æ–≤–µ: 3\n"
            f"–¶–µ–ª—å: –Ω–∞–π—Ç–∏ {word_data['min_words']} —Å–ª–æ–≤\n\n"
            f"–û—Ç–ø—Ä–∞–≤–ª—è–π —Å–ª–æ–≤–∞ –≤ —á–∞—Ç!",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif data == "words_finish":
        state = get_game_state(user_id)
        if state.get("game") == "words":
            found = len(state["found_words"])
            coins = found * 2
            update_coins(user_id, coins)
            save_game_score(user_id, "words", coins)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="game_words")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="menu_games")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                f"üìù <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã</b>\n\n"
                f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {found}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: +{coins} –º–æ–Ω–µ—Ç\n\n"
                f"–°–ª–æ–≤–∞: {', '.join(state['found_words'])}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
            clear_game_state(user_id)
    
    # ===== –ò–ì–†–ê: –ö–ê–ú–ï–ù–¨-–ù–û–ñ–ù–ò–¶–´-–ë–£–ú–ê–ì–ê =====
    elif data == "game_rps":
        keyboard = [
            [InlineKeyboardButton("‚úä –ö–∞–º–µ–Ω—å", callback_data="rps_rock")],
            [InlineKeyboardButton("‚úã –ë—É–º–∞–≥–∞", callback_data="rps_paper")],
            [InlineKeyboardButton("‚úåÔ∏è –ù–æ–∂–Ω–∏—Ü—ã", callback_data="rps_scissors")],
            [InlineKeyboardButton("‚ùå –í—ã—Ö–æ–¥", callback_data="menu_games")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "‚úä‚úã‚úåÔ∏è <b>–ö–∞–º–µ–Ω—å-–ù–æ–∂–Ω–∏—Ü—ã-–ë—É–º–∞–≥–∞</b>\n\n"
            "–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ö–æ–¥:",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )
    
    elif data.startswith("rps_"):
        choice = data.split("_")[1]
        bot_choice = random.choice(["rock", "paper", "scissors"])
        
        choices_emoji = {"rock": "‚úä", "paper": "‚úã", "scissors": "‚úåÔ∏è"}
        choices_ru = {"rock": "–ö–∞–º–µ–Ω—å", "paper": "–ë—É–º–∞–≥–∞", "scissors": "–ù–æ–∂–Ω–∏—Ü—ã"}
        
        result = ""
        coins = 0
        
        if choice == bot_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif (choice == "rock" and bot_choice == "scissors") or \
             (choice == "scissors" and bot_choice == "paper") or \
             (choice == "paper" and bot_choice == "rock"):
            result = "üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª! +15 –º–æ–Ω–µ—Ç"
            coins = 15
            update_coins(user_id, coins)
            save_game_score(user_id, "rps", 15)
        else:
            result = "üò¢ –¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª!"
        
        keyboard = [
            [InlineKeyboardButton("üîÑ –ï—â–µ —Ä–∞–∑", callback_data="game_rps")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="menu_games")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"‚úä‚úã‚úåÔ∏è <b>–†–µ–∑—É–ª—å—Ç–∞—Ç</b>\n\n"
            f"–¢—ã: {choices_emoji[choice]} {choices_ru[choice]}\n"
            f"–ë–æ—Ç: {choices_emoji[bot_choice]} {choices_ru[bot_choice]}\n\n"
            f"{result}",
            reply_markup=reply_markup,
            parse_mode='HTML'
        )

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip().upper()
    state = get_game_state(user_id)
    
    if not state:
        return
    
    # ===== –û–ë–†–ê–ë–û–¢–ö–ê –í–ò–°–ï–õ–ò–¶–´ =====
    if state.get("game") == "hangman":
        if len(text) != 1 or not text.isalpha():
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å –æ–¥–Ω—É –±—É–∫–≤—É!")
            return
        
        word = state["word"]
        guessed = state["guessed"]
        guessed.add(text)
        
        if text not in word:
            state["attempts"] -= 1
        
        display_word = ' '.join([letter if letter in guessed else '_' for letter in word])
        
        if '_' not in display_word:
            update_coins(user_id, 20)
            save_game_score(user_id, "hangman", 20)
            clear_game_state(user_id)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ", callback_data="game_hangman")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="menu_games")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üéâ <b>–ü–æ–±–µ–¥–∞!</b>\n\n"
                f"–°–ª–æ–≤–æ: {word}\n"
                f"–ù–∞–≥—Ä–∞–¥–∞: +20 –º–æ–Ω–µ—Ç",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        elif state["attempts"] <= 0:
            clear_game_state(user_id)
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="game_hangman")],
                [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∏–≥—Ä–∞–º", callback_data="menu_games")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"üíÄ <b>–ü—Ä–æ–∏–≥—Ä—ã—à!</b>\n\n"
                f"–°–ª–æ–≤–æ –±—ã–ª–æ: {word}",
                reply_markup=reply_markup,
                parse_mode='HTML'
            )
        else:
            set_game_state(user_id, state)
            await update.message.reply_text(
                f"üéØ <b>–í–∏—Å–µ–ª–∏—Ü–∞</b>\n\n"
                f"–°–ª–æ–≤–æ: {display_word}\n"
                f"–ü–æ–ø—ã—Ç–æ–∫ –æ—Å—Ç–∞–ª–æ—Å—å: {state['attempts']}\n"
                f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –±—É–∫–≤—ã: {', '.join(sorted(guessed))}",
                parse_mode='HTML'
            )
    
    # ===== –û–ë–†–ê–ë–û–¢–ö–ê –ú–ê–¢–ï–ú–ê–¢–ò–ö–ò =====
    elif state.get("game") == "math":
        try:
            user_answer = int(text)
            correct_answer = state["answer"]
            
            if user_answer == correct_answer:
                update_coins(user_id, 5)
                save_game_score(user_id, "math", 5)
                state["score"] += 1
                
                # –ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
                num1 = random.randint(1, 20)
                num2 = random.randint(1, 20)
                operation = random.choice(['+', '-', '*'])
                
                if operation == '+':
                    answer = num1 + num2
                elif operation == '-':
                    answer = num1 - num2
                else:
                    answer = num1 * num2
                
                state["answer"] = answer
                set_game_state(user_id, state)
                
                await update.message.reply_text(
                    f"‚úÖ <b>–ü—Ä–∞–≤–∏–ª—å–Ω–æ! +5 –º–æ–Ω–µ—Ç</b>\n\n"
                    f"–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–º–µ—Ä:\n"
                    f"<code>{num1} {operation} {num2} = ?</code>",
                    parse_mode='HTML'
                )
            else:
                await update.message.reply_text(
                    f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n"
                    f"–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer}",
                    parse_mode='HTML'
                )
        except ValueError:
            await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —á–∏—Å–ª–æ!")
    
    # ===== –û–ë–†–ê–ë–û–¢–ö–ê –°–õ–û–í –ò–ó –°–õ–û–í–ê =====
    elif state.get("game") == "words":
        main_word = state["main_word"]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–ª–æ–≤–æ —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ –±—É–∫–≤ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞
        if len(text) < 3:
            await update.message.reply_text("–°–ª–æ–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–∏–Ω–∏–º—É–º –∏–∑ 3 –±—É–∫–≤!")
            return
        
        if not all(text.count(letter) <= main_word.count(letter) for letter in set(text)):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ª–æ–≤–∞!")
            return
        
        if text in state["found_words"]:
            await update.message.reply_text("–≠—Ç–æ —Å–ª–æ–≤–æ —É–∂–µ –Ω–∞–π–¥–µ–Ω–æ!")
            return
        
        state["found_words"].add(text)
        set_game_state(user_id, state)
        
        await update.message.reply_text(
            f"‚úÖ <b>–°–ª–æ–≤–æ –ø—Ä–∏–Ω—è—Ç–æ!</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ —Å–ª–æ–≤: {len(state['found_words'])}\n"
            f"–¶–µ–ª—å: {state['min_words']}",
            parse_mode='HTML'
        )

# ==================== –ó–ê–ü–£–°–ö –ë–û–¢–ê ====================

def main():
    init_db()
    
    app = Application.builder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == '__main__':
    main()